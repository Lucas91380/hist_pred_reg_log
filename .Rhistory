nrow=4,
byrow=TRUE)
#Nouveau jeu de données obtenu par la concaténation
d_train <- rbind(d,d_plus)
table(d$histology)
install.packages("limma")
install.packages("BiocManager")
BiocManager::install("limma")
library(limma)
glm(c(s,0,0,1,1)~c(d[[12]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(logit))
#Variables gênes
genes <- names(data_train[,13:1012])
#Variables gênes
genes <- names(d[,13:1012])
modele = glm(c(d$histology,0,0,1,1)~c(d[[15]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(logit))
#Recodage histologie
data_train <- d
data_train$histology <- ifelse(d$histology == 'TCGA-LUSC', 1, 0)
modele = glm(c(data_train$histology,0,0,1,1)~c(data_train[[15]],0,max(data_train[,genes]),0,max(data_train[,genes])), family = binomial(logit))
modele$coefficients
modele$coefficients[[2]]
modele$coefficients[2]
#Option pour que le code ne soit pas affiché lors du knit
knitr::opts_chunk$set(echo = FALSE)
###Importation des données
setwd("/home/chabeau/Documents/UGA/projets/sex_pred_reg_log")
#Jeu de données d'apprentissage
d <- readRDS("starting_kit_histology/data_learn.rds")
#Jeu de données de test
test <- readRDS("starting_kit_histology/data_test_histology.rds")
#Jeu de données d'apprentissage
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
d[[ v ]] <- as.factor(x = d[[ v ]])
}
#Jeu de données de test
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
test[[ v ]] <- as.factor(x = test[[ v ]])
}
#Renommage des variables avec des caractères qui posent problème (-)
names(d) <- sub("-","_",names(d))
names(test) <- sub("-","_",names(d))
table(d$histology)
modele = glm(c(data_train$histology,0,0,1,1)~c(data_train[[15]],0,max(data_train[,genes]),0,max(data_train[,genes])), family = binomial(link = 'logit'))
modele$coefficients[[2]]
modele$coefficients
#Variables gênes
genes <- names(d[,13:1012])
#Fonction qui calcule
Pval__genes_univ <- function(g){
modele = glm(c(data_train$histology,0,0,1,1)~c(data_train[[g]],0,max(data_train[,genes]),0,max(data_train[,genes])), family = binomial(link = 'logit'))
b = modele$coefficients[[2]]
pv = summary(modele)$coefficients[2,4]
return(pv, b)
}
res <- sapply(genes, Pval_genes_univ)
#Variables gênes
genes <- names(d[,13:1012])
#Fonction qui calcule
Genes_univ <- function(g){
modele = glm(c(data_train$histology,0,0,1,1)~c(data_train[[g]],0,max(data_train[,genes]),0,max(data_train[,genes])), family = binomial(link = 'logit'))
b = modele$coefficients[[2]]
pv = summary(modele)$coefficients[2,4]
return(pv, b)
}
res <- sapply(genes, Genes_univ)
#Variables gênes
genes <- names(d[,13:1012])
#Fonction qui calcule
Genes_univ <- function(g){
modele = glm(c(data_train$histology,0,0,1,1)~c(data_train[[g]],0,max(data_train[,genes]),0,max(data_train[,genes])), family = binomial(link = 'logit'))
b = modele$coefficients[[2]]
pv = summary(modele)$coefficients[2,4]
return(c(pval = pv,beta = b))
}
res <- sapply(genes, Genes_univ)
#Variables gênes
genes <- names(d[,13:1012])
#Fonction qui calcule
Genes_univ <- function(g){
modele = glm(c(data_train$histology,0,0,1,1)~c(data_train[[g]],0,max(data_train[,genes]),0,max(data_train[,genes])), family = binomial(link = 'logit'))
b = modele$coefficients[[2]]
pv = summary(modele)$coefficients[2,4]
return(c(pval = pv,beta = b))
}
#Enregistrement des betas et des p-valeurs dans une dataframe
res <- sapply(genes, Genes_univ)
#Variables gênes
genes <- names(d[,13:1012])
#Fonction qui calcule
Genes_univ <- function(g){
modele = glm(c(data_train$histology,0,0,1,1)~c(data_train[[g]],0,max(data_train[,genes]),0,max(data_train[,genes])), family = binomial(link = 'logit'))
b = modele$coefficients[[2]]
pv = summary(modele)$coefficients[2,4]
return(c(pval = pv,beta = b))
}
#Enregistrement des betas et des p-valeurs dans une dataframe
res <- sapply(genes, Genes_univ)
res <- as.data.frame(t(res))
View(res)
plot(res$beta, -log10(res$pval), main="volcano plot")
rownames(res)[which(res$pval == min(res$pval))]
plot(res$beta, -log10(res$pval), main="volcano plot")
text(res$beta, -log10(res$pval), rownames(res))
with(res, plot(beta, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,2)))
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,2,5)))
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,2.5)))
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-3,3)))
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, pval<0.05 || abs(beta)>1 ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1), points(beta, -log10(pval), pch=20, col="green"))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, pval<0.05 | abs(beta)>1 ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1), points(beta, -log10(pval), pch=20, col="green"))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1)  | (pval>0.05 & abs(beta)>1) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1), points(beta, -log10(pval), pch=20, col="green"))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
install.packages("calibrate")
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
with(subset(res, pval<0.05 & abs(beta)>1.5), text(beta, -log10(pval), labs=rownames(res), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
with(subset(res, pval<0.05 & abs(beta)>1.5), text(beta, -log10(pval), rownames(res), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
with(subset(res, pval<0.05 & abs(beta)>1.5), text(beta, -log10(pval), labs=rownames(res), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), labs=rownames(res), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
#with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), labs=rownames(res), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), labs=rownames(subset(res, pval<0.05 & abs(beta)>1.5)), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), rownames(subset(res, pval<0.05 & abs(beta)>1.5))))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), rownames(subset(res, pval<0.05 & abs(beta)>1.5)), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), labs=rownames(subset(res, pval<0.05 & abs(beta)>1.5)), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), rownames(subset(res, pval<0.05 & abs(beta)>1.5)), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), rownames(subset(res, pval<0.05 & abs(beta)>1.5)), cex=.8))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), rownames(subset(res, pval<0.05 & abs(beta)>1.5)), cex=.8))
rownames(res)[which(pval<0.05 & abs(beta)>1.5)]
rownames(res)[which(res$pval<0.05 & abs(res$beta)>1.5)]
rownames(subset(res, pval<0.05 & abs(beta)>1.5))
rownames(res)[which(res$pval<0.05 & abs(res$beta)>1.5)]
rownames(subset(res, pval<0.05 & abs(beta)>1.5))
rownames(res)[which(res$pval<0.05 & abs(res$beta)>1.5)]
rownames(subset(res, pval<0.05 & abs(beta)>1.5))
#Formule du modèle de départ
formul <- paste("d$histology ~", paste(rownames(subset(res, pval<0.05 & abs(beta)>1.5)), collapse = " + "), " ")
formul
#Formule du modèle de départ
formul <- paste("d$histology ~", paste(rownames(subset(res, pval<0.05 & abs(beta)>1.5)), collapse = " + "), " ")
#Création du modèle de départ
model <- glm(
formula = formul,
data = data_train,
family = binomial(link = 'logit')
)
#Sélection de variables par méthode stepwise
step(model, dir='both')
rownames(subset(res, pval<0.05 & abs(beta)>1.5))
###Importation des données
setwd("/home/chabeau/Documents/UGA/projets/sex_pred_reg_log")
#Jeu de données d'apprentissage
d <- readRDS("starting_kit_histology/data_learn.rds")
#Jeu de données de test
test <- readRDS("starting_kit_histology/data_test_histology.rds")
#Jeu de données d'apprentissage
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
d[[ v ]] <- as.factor(x = d[[ v ]])
}
#Jeu de données de test
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
test[[ v ]] <- as.factor(x = test[[ v ]])
}
#Renommage des variables avec des caractères qui posent problème (-)
names(d) <- sub("-","_",names(d))
names(test) <- sub("-","_",names(d))
table(d$histology)
#Option pour que le code ne soit pas affiché lors du knit
knitr::opts_chunk$set(echo = FALSE)
###Importation des données
setwd("/home/chabeau/Documents/UGA/projets/sex_pred_reg_log")
#Jeu de données d'apprentissage
d <- readRDS("starting_kit_histology/data_learn.rds")
#Jeu de données de test
test <- readRDS("starting_kit_histology/data_test_histology.rds")
#Jeu de données d'apprentissage
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
d[[ v ]] <- as.factor(x = d[[ v ]])
}
#Jeu de données de test
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
test[[ v ]] <- as.factor(x = test[[ v ]])
}
#Renommage des variables avec des caractères qui posent problème (-)
names(d) <- sub("-","_",names(d))
names(test) <- sub("-","_",names(d))
table(d$histology)
enes <- names(d[,13:1012])
genes <- names(d[,13:1012])
modele = glm(c(d$histology,0,0,1,1)~c(d[[g]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(link = 'logit'))
modele = glm(c(d$histology,0,0,1,1)~c(d[[15]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(link = 'logit'))
modele = glm(c(d$histology,rep("TCGA-LUAD",2),rep("TCGA-LUSC",2))~c(d[[15]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(link = 'logit'))
modele = glm(c(as.factor(d$histology,rep("TCGA-LUAD",2),rep("TCGA-LUSC",2)))~c(d[[15]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(link = 'logit'))
modele = glm(as.factor(c(d$histology,rep("TCGA-LUAD",2),rep("TCGA-LUSC",2)))~c(d[[15]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(link = 'logit'))
#Option pour que le code ne soit pas affiché lors du knit
knitr::opts_chunk$set(echo = FALSE)
###Importation des données
setwd("/home/chabeau/Documents/UGA/projets/sex_pred_reg_log")
#Jeu de données d'apprentissage
d <- readRDS("starting_kit_histology/data_learn.rds")
#Jeu de données de test
test <- readRDS("starting_kit_histology/data_test_histology.rds")
#Jeu de données d'apprentissage
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
d[[ v ]] <- as.factor(x = d[[ v ]])
}
#Jeu de données de test
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
test[[ v ]] <- as.factor(x = test[[ v ]])
}
#Renommage des variables avec des caractères qui posent problème (-)
names(d) <- sub("-","_",names(d))
names(test) <- sub("-","_",names(d))
table(d$histology)
#Variables gênes
genes <- names(d[,13:1012])
#Fonction qui calcule
Genes_univ <- function(g){
modele = glm(as.factor(c(d$histology,rep("TCGA-LUAD",2),rep("TCGA-LUSC",2)))~c(d[[15]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(link = 'logit'))
b = modele$coefficients[[2]]
pv = summary(modele)$coefficients[2,4]
return(c(pval = pv,beta = b))
}
#Enregistrement des betas et des p-valeurs dans une dataframe
res <- sapply(genes, Genes_univ)
res <- as.data.frame(t(res))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), rownames(subset(res, pval<0.05 & abs(beta)>1.5)), cex=.8))
#Formule du modèle de départ
formul <- paste("d$histology ~", paste(rownames(subset(res, pval<0.05 & abs(beta)>1.5)), collapse = " + "), " ")
#Création du modèle de départ
model <- glm(
formula = formul,
data = d,
family = binomial(link = 'logit')
)
formul
#Formule du modèle de départ
formul <- paste("d$histology ~", rownames(subset(res, pval<0.05 & abs(beta)>1.5)), collapse = " + ", " ")
#Création du modèle de départ
model <- glm(
formula = formul,
data = d,
family = binomial(link = 'logit')
)
paste(rownames(subset(res, pval<0.05 & abs(beta)>1.5))
d
paste(rownames(subset(res, pval<0.05 & abs(beta)>1.5)), collapse = " + ")
#Option pour que le code ne soit pas affiché lors du knit
knitr::opts_chunk$set(echo = FALSE)
###Importation des données
setwd("/home/chabeau/Documents/UGA/projets/sex_pred_reg_log")
#Jeu de données d'apprentissage
d <- readRDS("starting_kit_histology/data_learn.rds")
#Jeu de données de test
test <- readRDS("starting_kit_histology/data_test_histology.rds")
#Jeu de données d'apprentissage
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
d[[ v ]] <- as.factor(x = d[[ v ]])
}
#Jeu de données de test
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
test[[ v ]] <- as.factor(x = test[[ v ]])
}
#Renommage des variables avec des caractères qui posent problème (-)
names(d) <- sub("-","_",names(d))
names(test) <- sub("-","_",names(d))
table(d$histology)
#Variables gênes
genes <- names(d[,13:1012])
#Fonction qui calcule
Genes_univ <- function(g){
modele = glm(as.factor(c(d$histology,rep("TCGA-LUAD",2),rep("TCGA-LUSC",2)))~c(d[[g]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(link = 'logit'))
b = modele$coefficients[[2]]
pv = summary(modele)$coefficients[2,4]
return(c(pval = pv,beta = b))
}
#Enregistrement des betas et des p-valeurs dans une dataframe
res <- sapply(genes, Genes_univ)
c(d$histology,rep("TCGA-LUAD",2),rep("TCGA-LUSC",2))
#Option pour que le code ne soit pas affiché lors du knit
knitr::opts_chunk$set(echo = FALSE)
###Importation des données
setwd("/home/chabeau/Documents/UGA/projets/sex_pred_reg_log")
#Jeu de données d'apprentissage
d <- readRDS("starting_kit_histology/data_learn.rds")
#Jeu de données de test
test <- readRDS("starting_kit_histology/data_test_histology.rds")
#Jeu de données d'apprentissage
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
d[[ v ]] <- as.factor(x = d[[ v ]])
}
#Jeu de données de test
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
test[[ v ]] <- as.factor(x = test[[ v ]])
}
#Renommage des variables avec des caractères qui posent problème (-)
names(d) <- sub("-","_",names(d))
names(test) <- sub("-","_",names(d))
table(d$histology)
#Variables gênes
genes <- names(d[,13:1012])
#Fonction qui calcule
Genes_univ <- function(g){
modele = glm(c(d$histology,0,0,1,1)~c(d[[g]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(link = 'logit'))
b = modele$coefficients[[2]]
pv = summary(modele)$coefficients[2,4]
return(c(pval = pv,beta = b))
}
#Enregistrement des betas et des p-valeurs dans une dataframe
res <- sapply(genes, Genes_univ)
as.factor(c(d$histology,0,0,1,1))
d$histology
c(d$histology)
c(d$histology,1,1,2,2)
d$histology
as.vector(d$histology)
as.factor(as.vector(d$histology))
as.factor(as.vector(d$histology), rep(TCGA-LUAD, 2), rep(TCGA-LUSC, 2))
as.factor(as.vector(d$histology), rep("TCGA-LUAD", 2), rep("TCGA-LUSC", 2))
factor(as.vector(d$histology), rep("TCGA-LUAD", 2), rep("TCGA-LUSC", 2))
as.factor(c(as.vector(d$histology), rep("TCGA-LUAD", 2), rep("TCGA-LUSC", 2)))
#Option pour que le code ne soit pas affiché lors du knit
knitr::opts_chunk$set(echo = FALSE)
###Importation des données
setwd("/home/chabeau/Documents/UGA/projets/sex_pred_reg_log")
#Jeu de données d'apprentissage
d <- readRDS("starting_kit_histology/data_learn.rds")
#Jeu de données de test
test <- readRDS("starting_kit_histology/data_test_histology.rds")
#Jeu de données d'apprentissage
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
d[[ v ]] <- as.factor(x = d[[ v ]])
}
#Jeu de données de test
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
test[[ v ]] <- as.factor(x = test[[ v ]])
}
#Renommage des variables avec des caractères qui posent problème (-)
names(d) <- sub("-","_",names(d))
names(test) <- sub("-","_",names(d))
table(d$histology)
#Variables gênes
genes <- names(d[,13:1012])
#Option pour que le code ne soit pas affiché lors du knit
knitr::opts_chunk$set(echo = FALSE)
###Importation des données
setwd("/home/chabeau/Documents/UGA/projets/sex_pred_reg_log")
#Jeu de données d'apprentissage
d <- readRDS("starting_kit_histology/data_learn.rds")
#Jeu de données de test
test <- readRDS("starting_kit_histology/data_test_histology.rds")
#Jeu de données d'apprentissage
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
d[[ v ]] <- as.factor(x = d[[ v ]])
}
#Jeu de données de test
for ( v in c("sex", "tissue_status", "histology", "os_months", "dead", "dead_at_24_months", "t", "n", "m", "tnm_stage", "tnm_grade") ) {
test[[ v ]] <- as.factor(x = test[[ v ]])
}
#Renommage des variables avec des caractères qui posent problème (-)
names(d) <- sub("-","_",names(d))
names(test) <- sub("-","_",names(d))
table(d$histology)
#Variables gênes
genes <- names(d[,13:1012])
#Fonction qui calcule
Genes_univ <- function(g){
modele = glm(as.factor(c(as.vector(d$histology), rep("TCGA-LUAD", 2), rep("TCGA-LUSC", 2)))~c(d[[g]],0,max(d[,genes]),0,max(d[,genes])), family = binomial(link = 'logit'))
b = modele$coefficients[[2]]
pv = summary(modele)$coefficients[2,4]
return(c(pval = pv,beta = b))
}
#Enregistrement des betas et des p-valeurs dans une dataframe
res <- sapply(genes, Genes_univ)
res <- as.data.frame(t(res))
#Base du graphique
with(res, plot(beta, -log10(pval), pch=20, main="Volcano plot", xlim=c(-2,3)))
#Ajout des couleurs
with(subset(res, pval>0.05 & abs(beta)<1.5 ), points(beta, -log10(pval), pch=20, col="red"))
with(subset(res, (pval<0.05 & abs(beta)<1.5)  | (pval>0.05 & abs(beta)>1.5) ), points(beta, -log10(pval), pch=20, col="orange"))
with(subset(res, pval<0.05 & abs(beta)>1.5), points(beta, -log10(pval), pch=20, col="green"))
#Ajout des noms des meilleurs gènes
library(calibrate)
with(subset(res, pval<0.05 & abs(beta)>1.5), textxy(beta, -log10(pval), rownames(subset(res, pval<0.05 & abs(beta)>1.5)), cex=.8))
#Formule du modèle de départ
formul <- paste("d$histology ~", paste(rownames(subset(res, pval<0.05 & abs(beta)>1.5)), collapse = " + "), " ")
#Création du modèle de départ
model <- glm(
formula = formul,
data = d,
family = binomial(link = 'logit')
)
#Sélection de variables par méthode stepwise
step(model, dir='both')
